# Property testing in Haskell with QuickCheck

Automated testing is (hopefully) becoming a normal part of the development workflow, ideally tests should be thought and written even before the actual code as an aid in reasoning about the problem that has to be solved. When the code is written the tests accumulated will help in spotting any broken code when maintaining the codebase. The agile community is especially keen on Test Driven Development (TDD) and Behavioural Driven Development BDD, which are guidelines and tools meant to manage the development workflow and write code "in the large".

However little attention is given to the tool that actually performs the testing, usually falling back to the venerable unit testing paradigm. Unit testing, even in the form of BDD are not bad, but force the developer to come up with the scenarios and usually one runs out of steam after a few cases. A tool that helps addressing this problem is the Haskell library [QuickCheck](https://hackage.haskell.org/package/QuickCheck) that was originally conceived in 2000. Despite this posts focuses on the Haskell implementation the library has now been translated in many other languages including [Erlang](http://www.quviq.com/products/erlang-quickcheck/), [Scala](https://www.scalacheck.org/), [Clojure](https://github.com/clojure/test.check), [Python](https://github.com/DRMacIver/hypothesis) and many more languages.

The core concept with QuickCheck is property-based testing. That is achieved by writing a function that states a property of the function to be tested. The QuickCheck library will then automatically generate data to feed to the function and test that the property holds in all cases.
